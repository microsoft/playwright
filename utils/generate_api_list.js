#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//@ts-check

const fs = require('fs');
const path = require('path');
const { parseApi } = require('./doclint/api_parser');

const PROJECT_DIR = path.join(__dirname, '..');

run().catch(e => {
  console.error(e);
  process.exit(1);
});

async function run() {
  const dirtyFiles = new Set();
  const documentationRoot = path.join(PROJECT_DIR, 'docs', 'src');
  const apiRoot = path.join(documentationRoot, 'api');
  const documentation = parseApi(apiRoot);
  documentation.filterForLanguage('js');

  const apiList = [
`/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is generated by ${path.basename(__filename)}, do not edit manually.

export const apiMethods = new Map([`,
];

  for (const cls of documentation.classesArray) {
    const list = [];
    for (const member of cls.membersArray) {
      if (member.kind === 'method' && member.async)
        list.push(member.alias);
    }
    if (cls.name === 'Locator')
      list.push('_expect');
    if (cls.name === 'Page')
      list.push('_expectScreenshot');
    if (list.length)
      apiList.push(`  ['${normalizeAPIName(cls.name)}', [${list.map(x => `'${x}'`).join(', ')}]],`);
  }
  apiList.push(`]);`);
  apiList.push('');

  writeAssumeNoop(path.join(PROJECT_DIR, 'packages', 'playwright-core', 'src', 'client', 'apiMethods.ts'), apiList.join('\n'), dirtyFiles);

  if (dirtyFiles.size) {
    console.log('============================')
    console.log('ERROR: generated files have changed, this is only error if happens in CI:');
    [...dirtyFiles].forEach(f => console.log(f));
    console.log('============================')
    process.exit(1);
  }
  process.exit(0);
}

function normalizeAPIName(name) {
  if (!name)
    return '';
  const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
  if (!match)
    return name;
  return match[1].toLowerCase() + match[2];
}

/**
 * @param {string} name
 * @param {string} content
 * @param {Set<string>} dirtyFiles
 */
function writeAssumeNoop(name, content, dirtyFiles) {
  fs.mkdirSync(path.dirname(name), { recursive: true });
  const oldContent = fs.existsSync(name) ? fs.readFileSync(name).toString() : '';
  if (oldContent !== content) {
    fs.writeFileSync(name, content);
    dirtyFiles.add(name);
  }
}
